version: 2.1

orbs:
  slack: circleci/slack@4.12.0
  aws-cli: circleci/aws-cli@3.1.4
  aws-eks: circleci/aws-eks@2.2.0
  kubernetes: circleci/kubernetes@1.3.1

commands:
  destroy_environment:
    description: Destroy resources upon failed deployment
    parameters:
      cluster_name:
        type: string
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: eksctl delete cluster --region us-east-2 --name react-app
  slack_notify_fail:
    description: Notifies slack channel upon job failure
    steps:
      - slack/notify:
          event: fail
          template: basic_fail_1

jobs:
  build_app:
    docker:
      - image: cimg/node:19.8.0
    steps:
      - checkout
      - run:
          name: Install dependencies
          command: |
            cd frontend
            yarn install
      - run:
          name: Build app
          command: |
            cd frontend
            yarn build
      - save_cache:
          paths: [frontend/node_modules]
          key: app-build
      - store_artifacts:
          path: build
      - slack_notify_fail
  lint_format_code:
    docker:
      - image: cimg/node:19.8.0
    steps:
      - checkout
      - restore_cache:
          key: app-build
      - run:
          name: Lint code
          command: |
            cd frontend
            yarn lint
      - run:
          name: Format code
          command: |
            cd frontend
            yarn format
      - slack_notify_fail
  lint_dockerfile:
    macos:
      xcode: 14.0.0
    steps:
      - checkout
      - run:
          name: Lint Dockerfile
          command: |
            HOMEBREW_NO_AUTO_UPDATE=1 brew install hadolint
            hadolint Dockerfile | tee -a hadolint_lint.txt
            lintErrors=$(stat -f%z hadolint_lint.txt)
            if [ "$lintErrors" -gt "0" ]; then
                echo "Errors found in the Dockerfile."
                exit 1
            else
                echo "No errors were found in the Dockerfile."
            fi
      - slack_notify_fail
  build_push_image:
    docker:
      - image: cimg/base:2023.03
    steps:
      - checkout
      - setup_remote_docker:
          version: 20.10.18
      - run:
          name: Build image
          command: |
            docker build -t friendbook .
            docker image ls
      - run:
          name: Push image
          command: |
            TAG=$CIRCLE_BUILD_NUM
            docker login -u joeygeof -p $DOCKERHUB_PASS
            docker image tag friendbook joeygeof/friendbook:latest
            docker image push joeygeof/friendbook
            docker image tag friendbook joeygeof/friendbook:v-$TAG
            docker image push joeygeof/friendbook:v-$TAG
      - slack_notify_fail
  create_cluster:
    docker:
      - image: 'cimg/python:3.11.2'
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/setup
      - run:
          name: Check for cluster & create cluster
          command: |
            set +e
            eksctl get cluster --region us-east-2 --name react-app
            exit_code=$?
            set -e
            if [ $exit_code -ne 0 ]; then
              echo "Creating react-app cluster..."
              aws sts get-caller-identity                   
              eksctl create cluster --region us-east-2 --name react-app --nodegroup-name react-app-nodes --node-type t3.medium --nodes-min 2 --nodes-max 3
            else
              echo "Cluster already exists. Skipping cluster creation job."
            fi
      - destroy_environment:
          cluster_name: react-app
      - slack_notify_fail
  deploy_update_to_cluster:
    docker:
      - image: 'cimg/python:3.11.2'
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/setup
      - kubernetes/install
      - run:
          name: Deploy to cluster
          command: |
            aws eks update-kubeconfig --name react-app
            kubectl apply -f k8s/deploy.yml
      - run:
          name: Check deployment
          command: |
            sleep 15
            echo "Deployments:"
            kubectl get deployment
            echo "Services:"
            kubectl get svc
            echo "Nodes:"
            kubectl get nodes
            echo "Pods:"
            kubectl get pods -o wide
            echo "Rollouts:"
            kubectl rollout history deployment/friendbook 
      - run:
          name: Update image to cluster
          command: |
            kubectl rollout restart deployment/friendbook
            sleep 15
            echo "Deployments:"
            kubectl get deployment
            echo "Services:"
            kubectl get svc
            echo "Nodes:"
            kubectl get nodes
            echo "Pods:"
            kubectl get pods -o wide
            echo "Rollouts:"
            kubectl rollout history deployment/friendbook
      - slack_notify_fail
  delete_cluster:
    docker:
      - image: 'cimg/python:3.11.2'
    steps:
      - checkout
      - aws-cli/setup
      - aws-eks/setup
      - run:
          name: Delete cluster
          command: eksctl delete cluster --region us-east-2 --name react-app
      - slack_notify_fail

workflows:
  App_Deployment:
    jobs:
      - build_app
      - lint_format_code:
          requires: [build_app]
      - lint_dockerfile:
          requires: [build_app]
      - build_push_image:
          requires: [lint_format_code,lint_dockerfile]
          filters:
            branches:
              only: [master]
      - create_cluster:
          requires: [build_push_image]
          filters:
            branches:
              only: [master]
      - deploy_update_to_cluster:
          requires: [create_cluster]
#      - delete_cluster-approval:
#          type: approval
#          requires: [deploy_update_to_cluster]
#      - delete_cluster:
#          requires: [delete_cluster-approval]